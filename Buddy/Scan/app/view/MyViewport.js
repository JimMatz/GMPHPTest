/*
 * File: app/view/MyViewport.js
 *
 * This file was generated by Sencha Architect version 4.2.5.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.6.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.6.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.view.MyViewport', {
    extend: 'Ext.container.Viewport',
    alias: 'widget.myviewport',

    requires: [
        'MyApp.view.MyViewportViewModel',
        'Ext.button.Button',
        'Ext.form.field.Number',
        'Ext.form.field.Display',
        'Ext.form.Label',
        'Ext.grid.Panel',
        'Ext.grid.column.Number',
        'Ext.grid.column.Check',
        'Ext.grid.column.Date',
        'Ext.view.Table',
        'Ext.toolbar.Toolbar'
    ],

    viewModel: {
        type: 'myviewport'
    },
    height: 250,
    id: 'btnGreen',
    width: 600,
    layout: 'fit',
    defaultListenerScope: true,

    items: [
        {
            xtype: 'panel',
            id: 'pnlMain',
            layout: 'accordion',
            title: 'Buddy Check Scan',
            items: [
                {
                    xtype: 'panel',
                    height: 143,
                    resizable: true,
                    scrollable: true,
                    width: 900,
                    items: [
                        {
                            xtype: 'textfield',
                            id: 'ord',
                            padding: 20,
                            fieldLabel: 'Order',
                            allowBlank: false,
                            selectOnFocus: true,
                            listeners: {
                                blur: 'onOrdBlur'
                            }
                        },
                        {
                            xtype: 'textfield',
                            id: 'bc',
                            padding: 20,
                            fieldLabel: 'Barcode',
                            allowBlank: false,
                            selectOnFocus: true,
                            listeners: {
                                blur: 'onTextfieldBlur'
                            }
                        },
                        {
                            xtype: 'button',
                            hidden: true,
                            id: 'btnReset',
                            text: 'Reset Scan',
                            listeners: {
                                click: 'onBtnResetClick'
                            }
                        },
                        {
                            xtype: 'numberfield',
                            id: 'xof',
                            padding: 10,
                            width: 50,
                            labelAlign: 'right',
                            readOnly: true
                        },
                        {
                            xtype: 'numberfield',
                            id: 'qty',
                            padding: 10,
                            width: 75,
                            fieldLabel: 'Of',
                            labelWidth: 25,
                            readOnly: true
                        },
                        {
                            xtype: 'textfield',
                            id: 'msg1',
                            width: 600,
                            readOnly: true
                        },
                        {
                            xtype: 'displayfield',
                            hidden: true,
                            id: 'btnGrn',
                            value: '<img src=\'../button_Green.png\'>',
                            readOnly: true
                        },
                        {
                            xtype: 'displayfield',
                            hidden: true,
                            id: 'btnRed',
                            value: '<img src=\'../button_Red.png\'>',
                            readOnly: true
                        },
                        {
                            xtype: 'label',
                            html: '<b>Some Text </b><br>Second Line',
                            id: 'ordNotes'
                        }
                    ]
                },
                {
                    xtype: 'gridpanel',
                    height: 600,
                    resizable: true,
                    title: 'Review',
                    columnLines: true,
                    store: 'storeD',
                    columns: [
                        {
                            xtype: 'numbercolumn',
                            width: 74,
                            dataIndex: 'CMPSEQ',
                            text: 'Seq'
                        },
                        {
                            xtype: 'gridcolumn',
                            width: 48,
                            dataIndex: 'CMPID',
                            text: 'ID'
                        },
                        {
                            xtype: 'numbercolumn',
                            width: 56,
                            dataIndex: 'SEQID',
                            text: '#'
                        },
                        {
                            xtype: 'checkcolumn',
                            dataIndex: 'SEQSTAT',
                            text: 'Scanned',
                            listeners: {
                                checkchange: 'onCheckcolumnCheckChange'
                            }
                        },
                        {
                            xtype: 'datecolumn',
                            dataIndex: 'SCANTS',
                            text: 'Date'
                        },
                        {
                            xtype: 'gridcolumn',
                            dataIndex: 'SCANT',
                            text: 'Time'
                        },
                        {
                            xtype: 'gridcolumn',
                            width: 87,
                            dataIndex: 'SCANUSR',
                            text: 'User '
                        },
                        {
                            xtype: 'gridcolumn',
                            hidden: true,
                            width: 87,
                            dataIndex: 'BC',
                            text: 'User '
                        }
                    ],
                    viewConfig: {
                        width: 900
                    },
                    listeners: {
                        rowcontextmenu: 'onGridpanelRowContextMenu'
                    }
                }
            ],
            dockedItems: [
                {
                    xtype: 'toolbar',
                    dock: 'top',
                    items: [
                        {
                            xtype: 'button',
                            text: 'New Order',
                            listeners: {
                                click: 'onButtonClick'
                            }
                        }
                    ]
                }
            ]
        }
    ],

    onOrdBlur: function(component, event, eOpts) {
        ord = component.value;
        Ext.Ajax.request({
                url: '/Gemini/Buddy/ScanTotal.php?ORD=' + ord  ,
                method: 'GET',
                async: false,
                success: function(response, opts) {
                    //  console.log(response);
                    var obj = response.responseText;
                      console.dir(obj);
                   // Ext.getStore('MyJsonStore').load();
                    Ext.getCmp('qty').setValue(obj);
                },

                failure: function(response, opts) {
                    console.log(response);
                  //  console.log('server-side failure with status code ' + response.status);
                }
            });

        component.setReadOnly(true);

        Ext.Ajax.request({
                url: '/Gemini/Buddy/getCust.php?ORD=' + ord  ,
                method: 'GET',
                async: false,
                success: function(response, opts) {
                    //  console.log(response);
                    var obj = response.responseText;
                      console.dir(obj);
                   // Ext.getStore('MyJsonStore').load();
                    Ext.getCmp('pnlMain').setTitle('Buddy Check Scan for ' + obj);
                },

                failure: function(response, opts) {
                    console.log(response);
                  //  console.log('server-side failure with status code ' + response.status);
                }
            });
        Ext.Ajax.request({
                url: '/Gemini/Buddy/getNotes.php?ORD=' + ord  ,
                method: 'GET',
                async: false,
                success: function(response, opts) {
                    //  console.log(response);
                    var obj = response.responseText;
                      console.dir(obj);
                   // Ext.getStore('MyJsonStore').load();
                    Ext.getCmp('ordNotes').setHtml(obj);
                },

                failure: function(response, opts) {
                    console.log(response);
                  //  console.log('server-side failure with status code ' + response.status);
                }
            });

          Ext.Ajax.request({
                url: '/Gemini/Buddy/ScanCount.php?ORD=' + ord  ,
                method: 'GET',
                async: false,
                success: function(response, opts) {
                    //  console.log(response);
                    var obj = response.responseText;
                      console.dir(obj);
                   // Ext.getStore('MyJsonStore').load();
                    Ext.getCmp('xof').setValue(obj);
                },

                failure: function(response, opts) {
                    console.log(response);
                  //  console.log('server-side failure with status code ' + response.status);
                }
            });


        if (parseInt(Ext.getCmp('xof').value) !== parseInt(Ext.getCmp('qty').value)){
            Ext.getCmp('btnRed').setVisible(true);
            Ext.getCmp('btnGrn').setVisible(false);
        } else {
            Ext.getCmp('btnRed').setVisible(false);
            Ext.getCmp('btnGrn').setVisible(true);
        }
        Ext.getStore('storeD').load({
            params: {
                ORD: ord
            }
        });

    },

    onTextfieldBlur: function(component, event, eOpts) {
        var ord = Ext.getCmp('ord').value;
        var v = component.value;
        Ext.getCmp('msg1').setValue('');
        Ext.getCmp('btnReset').setVisible(false);

        Ext.Ajax.request({
            url: '/Gemini/Buddy/ScanSet.php?ORD=' + ord + '&V=' + v ,
            method: 'GET',
            async: false,
            success: function(response, opts) {
                //  console.log(response);
                var obj = response.responseText;
                console.dir(obj);
                Ext.getCmp('msg1').setValue(obj);
                if (obj == 'OK'){
                    Ext.getCmp('bc').setValue('');

                    //
                }
                if (obj.substring(0,3) == 'Row'){
                    Ext.getCmp('btnReset').setVisible(true);

                }
            },

            failure: function(response, opts) {
                console.log(response);
                //  console.log('server-side failure with status code ' + response.status);
            }
        });

        Ext.Ajax.request({
            url: '/Gemini/Buddy/ScanCount.php?ORD=' + ord  ,
            method: 'GET',
            async: false,
            success: function(response, opts) {
                //  console.log(response);
                var obj = response.responseText;
                console.dir(obj);
                // Ext.getStore('MyJsonStore').load();
                Ext.getCmp('xof').setValue(obj);
            },

            failure: function(response, opts) {
                console.log(response);
                //  console.log('server-side failure with status code ' + response.status);
            }
        });


        if (parseInt(Ext.getCmp('xof').value) !== parseInt(Ext.getCmp('qty').value)){
            Ext.getCmp('btnRed').setVisible(true);
            Ext.getCmp('btnGrn').setVisible(false);
        } else {
            Ext.getCmp('btnRed').setVisible(false);
            Ext.getCmp('btnGrn').setVisible(true);
        }
        Ext.getStore('storeD').load({
            params: {
                ORD: ord
            }
        });

        if (Ext.getCmp('btnReset').isVisible){
            //  Ext.getCmp('btnReset').focus();
        } else {

        }
        Ext.getCmp('bc').focus();
    },

    onBtnResetClick: function(button, e, eOpts) {
        var ord = Ext.getCmp('ord').value;
        var v = Ext.getCmp('bc').value;
        Ext.getCmp('msg1').setValue('');


                Ext.Ajax.request({
                url: '/Gemini/Buddy/ScanReset.php?ORD=' + ord + '&V=' + v ,
                method: 'GET',
                async: false,
                success: function(response, opts) {
                    //  console.log(response);
                    var obj = response.responseText;
                      console.dir(obj);
                    Ext.getCmp('msg1').setValue(obj);
                   if (obj == 'OK'){
                       Ext.getCmp('bc').setValue('');
                      //
                   }
                },

                failure: function(response, opts) {
                    console.log(response);
                  //  console.log('server-side failure with status code ' + response.status);
                }
            });

            Ext.Ajax.request({
                url: '/Gemini/Buddy/ScanCount.php?ORD=' + ord  ,
                method: 'GET',
                async: false,
                success: function(response, opts) {
                    //  console.log(response);
                    var obj = response.responseText;
                      console.dir(obj);
                   // Ext.getStore('MyJsonStore').load();
                    Ext.getCmp('xof').setValue(obj);
                },

                failure: function(response, opts) {
                    console.log(response);
                  //  console.log('server-side failure with status code ' + response.status);
                }
            });


        if (parseInt(Ext.getCmp('xof').value) !== parseInt(Ext.getCmp('qty').value)){
            Ext.getCmp('btnRed').setVisible(true);
            Ext.getCmp('btnGrn').setVisible(false);
        } else {
            Ext.getCmp('btnRed').setVisible(false);
            Ext.getCmp('btnGrn').setVisible(true);
        }
        Ext.getStore('storeD').load({
            params: {
                ORD: ord
            }
        });
        Ext.getCmp('btnReset').setVisible(false);
        Ext.getCmp('bc').focus();
    },

    onCheckcolumnCheckChange: function(checkcolumn, rowIndex, checked, record, e, eOpts) {
        var ord = record.data.ORDERNUM;
        var v = record.data.BC;
        Ext.getCmp('msg1').setValue('');


        Ext.Ajax.request({
            url: '/Gemini/Buddy/ScanReset.php?ORD=' + ord + '&V=' + v ,
            method: 'GET',
            async: false,
            success: function(response, opts) {
                //  console.log(response);
                var obj = response.responseText;
                console.dir(obj);
                Ext.getCmp('msg1').setValue(obj);
                if (obj == 'OK'){
                    Ext.getCmp('bc').setValue('');
                    //
                }
            },

            failure: function(response, opts) {
                console.log(response);
                //  console.log('server-side failure with status code ' + response.status);
            }
        });

        Ext.Ajax.request({
            url: '/Gemini/Buddy/ScanCount.php?ORD=' + ord  ,
            method: 'GET',
            async: false,
            success: function(response, opts) {
                //  console.log(response);
                var obj = response.responseText;
                console.dir(obj);
                // Ext.getStore('MyJsonStore').load();
                Ext.getCmp('xof').setValue(obj);
            },

            failure: function(response, opts) {
                console.log(response);
                //  console.log('server-side failure with status code ' + response.status);
            }
        });


        if (parseInt(Ext.getCmp('xof').value) !== parseInt(Ext.getCmp('qty').value)){
            Ext.getCmp('btnRed').setVisible(true);
            Ext.getCmp('btnGrn').setVisible(false);
        } else {
            Ext.getCmp('btnRed').setVisible(false);
            Ext.getCmp('btnGrn').setVisible(true);
        }
        Ext.getStore('storeD').load({
            params: {
                ORD: ord
            }
        });

    },

    onGridpanelRowContextMenu: function(tableview, record, tr, rowIndex, e, eOpts) {
        data = record.data;
        ord = data.ORDERNUM;
        cmpseq = data.CMPSEQ;
        seqid = data.SEQID;
        bc = data.BC;

        console.log('row menu: ', bc);
            var menu_grid = new Ext.menu.Menu({ items:
                    [
                        { text: 'Reprint Label', handler: function() {
                            Ext.Ajax.request({
                    url: '/Gemini/Buddy/print1.php?DB=GI&BC=' + bc,
                    method: 'GET',
                    async: false,
                    success: function(response, opts) {
                        //  console.log(response);
                        var obj = response.responseText;
                        console.dir(obj);
                        // Ext.getStore('MyJsonStore').load();

                    },

                    failure: function(response, opts) {
                        console.log(response);
                        //  console.log('server-side failure with status code ' + response.status);
                    }
                });

                        }

                        },

                    ]


                                                                           });
         var position = [e.getX()-10, e.getY()-10];
                  e.stopEvent();
                  menu_grid.showAt(position);


    },

    onButtonClick: function(button, e, eOpts) {
        Ext.getCmp('ord').setReadOnly(false);
        Ext.getCmp('ord').setValue(0);
        Ext.getCmp('ord').focus();
    }

});