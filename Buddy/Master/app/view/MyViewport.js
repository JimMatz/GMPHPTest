/*
 * File: app/view/MyViewport.js
 *
 * This file was generated by Sencha Architect version 4.2.5.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.6.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.6.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.view.MyViewport', {
    extend: 'Ext.container.Viewport',
    alias: 'widget.myviewport',

    requires: [
        'MyApp.view.MyViewportViewModel',
        'Ext.form.Panel',
        'Ext.form.field.Number',
        'Ext.form.field.TextArea',
        'Ext.button.Button',
        'Ext.form.field.Hidden',
        'Ext.toolbar.Toolbar',
        'Ext.form.field.Display',
        'Ext.grid.Panel',
        'Ext.view.Table',
        'Ext.grid.column.Number',
        'Ext.grid.feature.Summary'
    ],

    viewModel: {
        type: 'myviewport'
    },
    height: 335,
    width: 639,
    layout: 'fit',
    defaultListenerScope: true,

    items: [
        {
            xtype: 'panel',
            id: 'pnlMain',
            title: 'Buddy Check Components',
            layout: {
                type: 'vbox',
                align: 'stretch'
            },
            items: [
                {
                    xtype: 'form',
                    height: 300,
                    id: 'formCmp',
                    layout: 'absolute',
                    bodyPadding: 10,
                    url: '/Gemini/Buddy/MCrud.php',
                    items: [
                        {
                            xtype: 'numberfield',
                            x: 10,
                            y: 10,
                            id: 'ord',
                            fieldLabel: 'Order',
                            name: 'ord',
                            allowBlank: false,
                            selectOnFocus: true,
                            listeners: {
                                blur: 'onOrdBlur'
                            }
                        },
                        {
                            xtype: 'textfield',
                            x: 10,
                            y: 50,
                            id: 'cmp',
                            width: 480,
                            fieldLabel: 'Component',
                            name: 'cmp',
                            allowBlank: false,
                            enforceMaxLength: true,
                            maxLength: 200,
                            selectOnFocus: true,
                            listeners: {
                                blur: 'onCmpBlur'
                            }
                        },
                        {
                            xtype: 'textfield',
                            x: 10,
                            y: 90,
                            id: 'cmpid',
                            width: 150,
                            fieldLabel: ' ID',
                            name: 'cmpid',
                            allowBlank: false,
                            enforceMaxLength: true,
                            maxLength: 3
                        },
                        {
                            xtype: 'numberfield',
                            x: 180,
                            y: 90,
                            id: 'cmpqty',
                            width: 180,
                            fieldLabel: 'Quantity',
                            name: 'cmpqty',
                            allowBlank: false,
                            selectOnFocus: true,
                            maxValue: 999,
                            minValue: 1
                        },
                        {
                            xtype: 'textfield',
                            x: 380,
                            y: 90,
                            id: 'uom',
                            width: 200,
                            fieldLabel: 'UOM',
                            name: 'uom',
                            enforceMaxLength: true,
                            maxLength: 10
                        },
                        {
                            xtype: 'textareafield',
                            x: 10,
                            y: 130,
                            id: 'cmpnotes',
                            width: 580,
                            fieldLabel: 'Notes',
                            name: 'cmpnotes'
                        },
                        {
                            xtype: 'button',
                            x: 110,
                            y: 220,
                            id: 'btnCmp',
                            text: 'Add',
                            listeners: {
                                click: 'onBtnCmpClick'
                            }
                        },
                        {
                            xtype: 'button',
                            x: 190,
                            y: 220,
                            hidden: true,
                            id: 'btnDelete',
                            text: 'Delete',
                            listeners: {
                                click: 'onBtnCmpClick1'
                            }
                        },
                        {
                            xtype: 'hiddenfield',
                            id: 'seq',
                            fieldLabel: 'Sequence',
                            name: 'seq'
                        },
                        {
                            xtype: 'displayfield',
                            x: 840,
                            y: 130,
                            hidden: true,
                            id: 'copy',
                            width: 420,
                            fieldLabel: 'Copy',
                            value: '',
                            htmlEncode: true
                        }
                    ],
                    dockedItems: [
                        {
                            xtype: 'toolbar',
                            x: 573,
                            y: 9,
                            dock: 'top',
                            items: [
                                {
                                    xtype: 'button',
                                    text: 'New Order',
                                    listeners: {
                                        click: 'onButtonClick1'
                                    }
                                },
                                {
                                    xtype: 'button',
                                    hidden: true,
                                    id: 'btnPrint',
                                    text: 'Save and Print',
                                    listeners: {
                                        click: 'onButtonClick'
                                    }
                                },
                                {
                                    xtype: 'button',
                                    hidden: true,
                                    id: 'reset',
                                    text: 'Reset and Default',
                                    listeners: {
                                        click: 'onButtonClick2'
                                    }
                                },
                                {
                                    xtype: 'button',
                                    text: 'Review',
                                    listeners: {
                                        click: 'onButtonClick3'
                                    }
                                },
                                {
                                    xtype: 'button',
                                    icon: '../../Images/q.png',
                                    listeners: {
                                        click: 'onButtonClick4'
                                    }
                                }
                            ]
                        }
                    ]
                },
                {
                    xtype: 'gridpanel',
                    columnLines: true,
                    bind: {
                        store: 'storeM'
                    },
                    columns: [
                        {
                            xtype: 'numbercolumn',
                            hidden: true,
                            dataIndex: 'ORDERNUM',
                            text: 'Order',
                            format: '00'
                        },
                        {
                            xtype: 'numbercolumn',
                            width: 62,
                            align: 'end',
                            dataIndex: 'CMPSEQ',
                            text: 'Seq',
                            format: '00'
                        },
                        {
                            xtype: 'gridcolumn',
                            width: 205,
                            dataIndex: 'COMPONENT',
                            text: 'Component'
                        },
                        {
                            xtype: 'gridcolumn',
                            width: 42,
                            align: 'center',
                            dataIndex: 'CMPID',
                            text: 'ID'
                        },
                        {
                            xtype: 'numbercolumn',
                            summaryType: 'sum',
                            align: 'end',
                            dataIndex: 'QTY',
                            text: 'Qty',
                            format: '0,000'
                        },
                        {
                            xtype: 'gridcolumn',
                            align: 'center',
                            dataIndex: 'UOM',
                            text: 'Uom'
                        },
                        {
                            xtype: 'gridcolumn',
                            hidden: true,
                            width: 51,
                            align: 'center',
                            dataIndex: 'SEQSTATUS',
                            text: 'Stat'
                        },
                        {
                            xtype: 'gridcolumn',
                            width: 693,
                            dataIndex: 'CMPNOTES',
                            text: 'Notes'
                        }
                    ],
                    features: [
                        {
                            ftype: 'summary',
                            dock: 'top'
                        }
                    ],
                    listeners: {
                        rowdblclick: 'onGridpanelRowDblClick'
                    }
                }
            ]
        }
    ],

    onOrdBlur: function(component, event, eOpts) {
        var ord = component.value;

        Ext.Ajax.request({
                url: '/Gemini/Buddy/getCust.php?DB=GI&ORD=' + ord  ,
                method: 'GET',
                async: false,
                success: function(response, opts) {
                    //  console.log(response);
                    var obj = response.responseText;
                     // console.log(obj);
                   // Ext.getStore('MyJsonStore').load();
                    Ext.getCmp('pnlMain').setTitle('Buddy Check Components for ' + obj);

                   Ext.Ajax.request({
                url: '/Gemini/Buddy/getCpy.php?DB=GI&ORD=' + ord  ,
                method: 'GET',
                async: false,
                success: function(response, opts) {
                    //  console.log(response);
                    var obj = response.responseText;
                      console.log('copy count: ', obj);
                    Ext.getCmp('copy').setVisible(true);
                    Ext.getCmp('copy').setValue(obj);

                },

                failure: function(response, opts) {
                    console.log(response);
                  //  console.log('server-side failure with status code ' + response.status);
                }
            });


                },

                failure: function(response, opts) {
                    console.log(response);
                  //  console.log('server-side failure with status code ' + response.status);
                }
            });

        Ext.getCmp('btnPrint').setVisible(true);
        Ext.getCmp('reset').setVisible(true);
        store = Ext.getStore('storeM');
        store.load({
            params:{
                ORD: ord
            }
        });
    },

    onCmpBlur: function(component, event, eOpts) {
        v = component.value;
        id = Ext.getCmp('cmpid');
        idv = id.value;
        console.log(v, id);
        if (idv === ''){
            id.setValue(v.charAt(0));
            Ext.getCmp('cmpqty').focus();
        }
    },

    onBtnCmpClick: function(button, e, eOpts) {
        form = Ext.getCmp('formCmp').getForm();
        var ord = Ext.getCmp('ord').value;
        action = Ext.getCmp('btnCmp').text;
        if (form.isValid()){
            form.submit({
                params: {
                    ORD: ord,
                    Action: action
                },
                success: function(){

                    store = Ext.getStore('storeM');
                    store.load({
                        params:{
                            ORD: ord
                        }
                    });
                    Ext.getCmp('cmp').setValue('');
                    Ext.getCmp('cmpid').setValue('');
                    Ext.getCmp('uom').setValue('');
                    //Ext.getCmp('cmpqty').setValue(0);
                    Ext.getCmp('cmp').focus();
                    Ext.getCmp('btnCmp').setText('Add');


                }
            });



        }
    },

    onBtnCmpClick1: function(button, e, eOpts) {
        form = Ext.getCmp('formCmp').getForm();
         var ord = Ext.getCmp('ord').value;
        action = Ext.getCmp('btnDelete').text;
        if (form.isValid()){
            form.submit({
                params: {
                    ORD: ord,
                 Action: action
                },
                success: function(){

                store = Ext.getStore('storeM');
                store.load({
                    params:{
                        ORD: ord
                    }
                });
                    Ext.getCmp('cmp').setValue('');
                    Ext.getCmp('cmpid').setValue('');
                    Ext.getCmp('uom').setValue('');
                    Ext.getCmp('cmpqty').setValue(0);
                    Ext.getCmp('cmp').focus();
                    Ext.getCmp('btnDelete').setVisible(false);


            }
            });



        }
    },

    onButtonClick1: function(button, e, eOpts) {
        Ext.getCmp('ord').setReadOnly(false);
        Ext.getCmp('ord').setValue(0);
        Ext.getCmp('ord').focus();
        Ext.getCmp('btnPrint').setVisible(false);
        Ext.getStore('storeReview').load();
    },

    onButtonClick: function(button, e, eOpts) {
        var ord = Ext.getCmp('ord').value;
        Ext.Ajax.request({
            url: '/Gemini/Buddy/Print.php?DB=GI&ORD=' + ord,
            method: 'GET',
            async: false,
            success: function(response, opts) {
                //  console.log(response);
                var obj = response.responseText;
                //  console.dir(obj);
                Ext.getStore('storeM').load();
            },

            failure: function(response, opts) {
                console.log(response);
                console.log('server-side failure with status code ' + response.status);
            }
        });
        Ext.getCmp('ord').setReadOnly(false);
        Ext.getCmp('ord').setValue(0);
        Ext.getCmp('ord').focus();
        Ext.getCmp('btnPrint').setVisible(false);
    },

    onButtonClick2: function(button, e, eOpts) {
        var ord = Ext.getCmp('ord').value;
        Ext.Ajax.request({
            url: '/Gemini/Buddy/ResetDetail.php?DB=GI&ORD=' + ord,
            method: 'GET',
            async: false,
            success: function(response, opts) {
                //  console.log(response);
                var obj = response.responseText;
                //  console.dir(obj);
                Ext.getStore('storeM').load();
            },

            failure: function(response, opts) {
                console.log(response);
                console.log('server-side failure with status code ' + response.status);
            }
        });
        Ext.getCmp('btnPrint').setVisible(true);
        Ext.getCmp('reset').setVisible(true);
        store = Ext.getStore('storeM');
        store.load({
            params:{
                ORD: ord,
                DB: 'GI'
            }
        });
    },

    onButtonClick3: function(button, e, eOpts) {
        var winR = Ext.widget('winExists');
        winR.setVisible(true);

    },

    onButtonClick4: function(button, e, eOpts) {
        var winH = Ext.widget('winHelp');
        winH.setVisible(true);
    },

    onGridpanelRowDblClick: function(tableview, record, element, rowIndex, e, eOpts) {
        console.log('Record: ', record);
        Ext.getCmp('ord').setValue(record.data.ORDERNUM);
        Ext.getCmp('cmp').setValue(Ext.String.trim(record.data.COMPONENT));
        Ext.getCmp('cmpid').setValue(Ext.String.trim(record.data.CMPID));
        Ext.getCmp('cmpqty').setValue(record.data.QTY);
        Ext.getCmp('uom').setValue(Ext.String.trim(record.data.UOM));
        Ext.getCmp('cmpnotes').setValue(Ext.String.trim(record.data.CMPNOTES));
        Ext.getCmp('seq').setValue(record.data.CMPSEQ);
        Ext.getCmp('btnCmp').setText('Update');
        Ext.getCmp('btnDelete').setVisible(true);
    }

});