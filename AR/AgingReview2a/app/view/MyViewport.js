/*
 * File: app/view/MyViewport.js
 *
 * This file was generated by Sencha Architect version 4.2.5.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.6.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.6.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.view.MyViewport', {
    extend: 'Ext.container.Viewport',
    alias: 'widget.myviewport',

    requires: [
        'MyApp.view.MyViewportViewModel',
        'Ext.grid.Panel',
        'Ext.view.Table',
        'Ext.grid.filters.filter.List',
        'Ext.grid.column.Number',
        'Ext.grid.filters.filter.Number',
        'Ext.toolbar.Toolbar',
        'Ext.form.field.Date',
        'Ext.button.Button',
        'Ext.form.Label',
        'Ext.menu.Menu',
        'Ext.menu.Item',
        'Ext.grid.feature.Summary',
        'Ext.grid.filters.Filters'
    ],

    viewModel: {
        type: 'myviewport'
    },
    height: 250,
    width: 400,
    layout: 'fit',
    defaultListenerScope: true,

    items: [
        {
            xtype: 'gridpanel',
            stateEvents: [
                'filterchange',
                'sortchange',
                'columnhide',
                'columnmove',
                'columnresize',
                'groupchange'
            ],
            stateful: true,
            stateId: 'grid1',
            height: 354,
            id: 'grid1',
            width: 906,
            title: 'Aging Review',
            columnLines: true,
            bind: {
                store: 'store_Rgns'
            },
            viewConfig: {
                stateful: true,
                stateId: 'grid1a',
                loadingText: 'Retreiving Aging Data'
            },
            columns: [
                {
                    xtype: 'gridcolumn',
                    stateful: true,
                    stateId: 'rgn',
                    width: 62,
                    dataIndex: 'RGN',
                    groupable: true,
                    text: 'Region',
                    listeners: {
                        statesave: 'onGridcolumnStateSave'
                    },
                    filter: {
                        type: 'list'
                    }
                },
                {
                    xtype: 'gridcolumn',
                    stateful: true,
                    stateId: 'cr',
                    text: 'Credits',
                    columns: [
                        {
                            xtype: 'numbercolumn',
                            summaryRenderer: function(val, params, data, metaData) {
                                value = Ext.util.Format.number(val, '0,000.00');
                                return value;
                            },
                            summaryType: 'sum',
                            stateful: true,
                            stateId: 'cra',
                            width: 75,
                            sortable: true,
                            align: 'end',
                            dataIndex: 'GRP_CR_AMT',
                            text: 'Amount',
                            filter: {
                                type: 'number'
                            }
                        },
                        {
                            xtype: 'numbercolumn',
                            summaryRenderer: function(val, params, data, metaData) {
                                value = Ext.util.Format.number(val, '0,000');
                                return value;
                            },
                            summaryType: 'sum',
                            stateful: true,
                            stateId: 'cri',
                            width: 50,
                            sortable: true,
                            align: 'end',
                            dataIndex: 'GRP_CR_CNT',
                            text: '#',
                            format: '0,000',
                            filter: {
                                type: 'number'
                            }
                        }
                    ]
                },
                {
                    xtype: 'gridcolumn',
                    align: 'center',
                    text: 'Current',
                    columns: [
                        {
                            xtype: 'numbercolumn',
                            summaryRenderer: function(val, params, data, metaData) {
                                value = Ext.util.Format.number(val, '0,000.00');
                                return value;
                            },
                            summaryType: 'sum',
                            stateful: true,
                            stateId: '1a',
                            width: 75,
                            sortable: true,
                            align: 'end',
                            dataIndex: 'GRP_0_AMT',
                            text: 'Amount',
                            filter: {
                                type: 'number'
                            }
                        },
                        {
                            xtype: 'numbercolumn',
                            summaryRenderer: function(val, params, data, metaData) {
                                value = Ext.util.Format.number(val, '0,000');
                                return value;
                            },
                            summaryType: 'sum',
                            stateful: true,
                            stateId: '1i',
                            width: 50,
                            sortable: true,
                            align: 'end',
                            dataIndex: 'GRP_0_CNT',
                            text: '#',
                            format: '0,000',
                            filter: {
                                type: 'number'
                            }
                        }
                    ]
                },
                {
                    xtype: 'gridcolumn',
                    stateful: true,
                    stateId: 'g1',
                    text: '1-15',
                    columns: [
                        {
                            xtype: 'numbercolumn',
                            summaryRenderer: function(val, params, data, metaData) {
                                value = Ext.util.Format.number(val, '0,000.00');
                                return value;
                            },
                            summaryType: 'sum',
                            stateful: true,
                            stateId: '1a',
                            width: 75,
                            sortable: true,
                            align: 'end',
                            dataIndex: 'GRP_1_AMT',
                            text: 'Amount',
                            filter: {
                                type: 'number'
                            }
                        },
                        {
                            xtype: 'numbercolumn',
                            summaryRenderer: function(val, params, data, metaData) {
                                value = Ext.util.Format.number(val, '0,000');
                                return value;
                            },
                            summaryType: 'sum',
                            stateful: true,
                            stateId: '1i',
                            width: 50,
                            sortable: true,
                            align: 'end',
                            dataIndex: 'GRP_1_CNT',
                            text: '#',
                            format: '0,000',
                            filter: {
                                type: 'number'
                            }
                        }
                    ]
                },
                {
                    xtype: 'gridcolumn',
                    stateful: true,
                    stateId: 'g2',
                    text: '16-30',
                    columns: [
                        {
                            xtype: 'numbercolumn',
                            summaryRenderer: function(val, params, data, metaData) {
                                value = Ext.util.Format.number(val, '0,000.00');
                                return value;
                            },
                            summaryType: 'sum',
                            stateful: true,
                            stateId: '2a',
                            width: 75,
                            sortable: true,
                            align: 'end',
                            dataIndex: 'GRP_2_AMT',
                            text: 'Amount',
                            filter: {
                                type: 'number'
                            }
                        },
                        {
                            xtype: 'numbercolumn',
                            summaryRenderer: function(val, params, data, metaData) {
                                value = Ext.util.Format.number(val, '0,000');
                                return value;
                            },
                            summaryType: 'sum',
                            stateful: true,
                            stateId: '2i',
                            width: 50,
                            sortable: true,
                            align: 'end',
                            dataIndex: 'GRP_2_CNT',
                            text: '#',
                            format: '0,000',
                            filter: {
                                type: 'number'
                            }
                        }
                    ]
                },
                {
                    xtype: 'gridcolumn',
                    stateful: true,
                    stateId: 'g3',
                    text: '31-60',
                    columns: [
                        {
                            xtype: 'numbercolumn',
                            summaryRenderer: function(val, params, data, metaData) {
                                value = Ext.util.Format.number(val, '0,000.00');
                                return value;
                            },
                            summaryType: 'sum',
                            stateful: true,
                            stateId: '3a',
                            width: 75,
                            sortable: true,
                            align: 'end',
                            dataIndex: 'GRP_3_AMT',
                            text: 'Amount',
                            filter: {
                                type: 'number'
                            }
                        },
                        {
                            xtype: 'numbercolumn',
                            summaryRenderer: function(val, params, data, metaData) {
                                value = Ext.util.Format.number(val, '0,000');
                                return value;
                            },
                            summaryType: 'sum',
                            stateful: true,
                            stateId: '3i',
                            width: 50,
                            sortable: true,
                            align: 'end',
                            dataIndex: 'GRP_3_CNT',
                            text: '#',
                            format: '0,000',
                            filter: {
                                type: 'number'
                            }
                        }
                    ]
                },
                {
                    xtype: 'gridcolumn',
                    stateful: true,
                    stateId: 'g4',
                    text: '61-90',
                    columns: [
                        {
                            xtype: 'numbercolumn',
                            summaryRenderer: function(val, params, data, metaData) {
                                value = Ext.util.Format.number(val, '0,000.00');
                                return value;
                            },
                            summaryType: 'sum',
                            stateful: true,
                            stateId: '4a',
                            width: 75,
                            sortable: true,
                            align: 'end',
                            dataIndex: 'GRP_4_AMT',
                            text: 'Amount'
                        },
                        {
                            xtype: 'numbercolumn',
                            summaryRenderer: function(val, params, data, metaData) {
                                value = Ext.util.Format.number(val, '0,000');
                                return value;
                            },
                            summaryType: 'sum',
                            stateful: true,
                            stateId: '4i',
                            width: 50,
                            sortable: true,
                            align: 'end',
                            dataIndex: 'GRP_4_CNT',
                            text: '#',
                            format: '0,000'
                        }
                    ]
                },
                {
                    xtype: 'gridcolumn',
                    stateful: true,
                    stateId: 'g5',
                    text: 'over 90',
                    columns: [
                        {
                            xtype: 'numbercolumn',
                            summaryRenderer: function(val, params, data, metaData) {
                                value = Ext.util.Format.number(val, '0,000.00');
                                return value;
                            },
                            summaryType: 'sum',
                            stateful: true,
                            stateId: '5a',
                            width: 75,
                            sortable: true,
                            align: 'end',
                            dataIndex: 'GRP_5_AMT',
                            text: 'Amount',
                            filter: {
                                type: 'number'
                            }
                        },
                        {
                            xtype: 'numbercolumn',
                            summaryRenderer: function(val, params, data, metaData) {
                                value = Ext.util.Format.number(val, '0,000');
                                return value;
                            },
                            summaryType: 'sum',
                            stateful: true,
                            stateId: '5i',
                            width: 50,
                            sortable: true,
                            align: 'end',
                            dataIndex: 'GRP_5_CNT',
                            text: '#',
                            format: '0,000',
                            filter: {
                                type: 'number'
                            }
                        }
                    ]
                }
            ],
            dockedItems: [
                {
                    xtype: 'toolbar',
                    dock: 'top',
                    items: [
                        {
                            xtype: 'datefield',
                            id: 'asof',
                            fieldLabel: 'As Of Date',
                            name: 'asof',
                            format: 'Y-m-d',
                            submitFormat: 'Y-m-d',
                            listeners: {
                                change: 'onAsofChange'
                            }
                        },
                        {
                            xtype: 'button',
                            iconCls: 'x-fa fa-refresh',
                            tooltip: 'Reload Aging',
                            listeners: {
                                click: 'onButtonClick1'
                            }
                        },
                        {
                            xtype: 'button',
                            iconCls: 'x-fa fa-cog',
                            tooltip: 'Set Defaults',
                            listeners: {
                                click: 'onButtonClick'
                            }
                        },
                        {
                            xtype: 'datefield',
                            hidden: true,
                            id: 'casof',
                            fieldLabel: 'Current As Of Date',
                            readOnly: true
                        },
                        {
                            xtype: 'label',
                            id: 'xasof',
                            style: 'color: FFFF00;',
                            text: 'As of Date has changed Remember to Reload the data'
                        },
                        {
                            xtype: 'button',
                            hidden: true,
                            text: 'Export',
                            menu: {
                                xtype: 'menu',
                                width: 120,
                                items: [
                                    {
                                        xtype: 'menuitem',
                                        text: 'to Excel',
                                        listeners: {
                                            click: 'onMenuitemClick'
                                        }
                                    },
                                    {
                                        xtype: 'menuitem',
                                        text: 'to CSV',
                                        listeners: {
                                            click: 'onMenuitemClick1'
                                        }
                                    },
                                    {
                                        xtype: 'menuitem',
                                        text: 'to HTML',
                                        listeners: {
                                            click: 'onMenuitemClick2'
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            xtype: 'button',
                            icon: '../../Images/q.png',
                            listeners: {
                                click: 'onButtonClick2'
                            }
                        }
                    ]
                }
            ],
            features: [
                {
                    ftype: 'summary',
                    dock: 'top'
                }
            ],
            listeners: {
                rowdblclick: 'onGrid1RowDblClick',
                celldblclick: 'onGrid1CellDblClick'
            },
            plugins: [
                {
                    ptype: 'gridfilters'
                }
            ]
        }
    ],
    listeners: {
        afterrender: 'onViewportAfterRender'
    },

    onGridcolumnStateSave: function(stateful, state, eOpts) {
        console.log('save Region State', state);
    },

    onAsofChange: function(field, newValue, oldValue, eOpts) {
        val = newValue;
        cval = Ext.getCmp('casof').getValue();
        console.log('As of Change: ', val, cval);

         if (Ext.Date.getElapsed(val, cval) === 0){
            Ext.getCmp('xasof').setVisible(false);
        } else {
         Ext.getCmp('xasof').setVisible(true);
        }

    },

    onButtonClick1: function(button, e, eOpts) {
        var asof = Ext.getCmp('asof').value;
        var asofdate = Ext.Date.format(asof, 'Y-m-d');

             Ext.Ajax.request({
                        url: '/Gemini/AR/setAsOf.php?DB=GI&ASOF=' + asofdate ,
                        method: 'GET',

                        async: false,
                        callback: function ( options, success, response ) {
                    var obj1 = Ext.JSON.decode(response.responseText);



                   Ext.Ajax.request({
                url: '/Gemini/AR/CrtAgeView.php?DB=GI' ,
                method: 'GET',
                async: false,
                loadMask: 'Creating your aging View',
                success: function(response, opts) {
                     var obj = Ext.JSON.decode(response.responseText);
           console.log(obj.msg);

                },

                failure: function(response, opts) {
                    console.log(response);
                  //  console.log('server-side failure with status code ' + response.status);
                }
            });

           store1 = Ext.getStore('store_Defaults');
                store1.load();

        Ext.getCmp('xasof').setVisible(false);
        Ext.getCmp('casof').setValue(Ext.getCmp('asof').getValue());
         store = Ext.getStore('store_Rgns');
                store.load();

                        }

             });


    },

    onButtonClick: function(button, e, eOpts) {

        var w2 = Ext.widget('win2');
        console.log(w2);
        w2.setVisible(true);
    },

    onMenuitemClick: function(item, e, eOpts) {


                var grid = Ext.getCmp('grid1');
                var dt = Ext.Date.format(new Date(), 'Y-m-d h:i:s');
                grid.saveDocumentAs({
                    type: 'xlsx',
                    title: 'AR Aging Review',
                    fileName: 'ARAging_Review_' + dt +'.xlsx'

        });
    },

    onMenuitemClick1: function(item, e, eOpts) {
        var grid = Ext.getCmp('grid1');
        var dt = Ext.Date.format(new Date(), 'Y-m-d h:i:s');
        grid.saveDocumentAs({
            type: 'csv',
            title: 'AR Aging Review',
            fileName: 'ARAging_Review_' + dt +'.csv'
        });
    },

    onMenuitemClick2: function(item, e, eOpts) {
        var grid = Ext.getCmp('grid1');
        var dt = Ext.Date.format(new Date(), 'Y-m-d h:i:s');
        grid.saveDocumentAs({
            type: 'html',
            title: 'AR Aging Review',
            fileName: 'ARAging_Review' + dt +'.html'
        });
    },

    onButtonClick2: function(button, e, eOpts) {
        var win = Ext.widget('winhelp');
        console.log(win);
        win.setVisible(true);
    },

    onGrid1RowDblClick: function(tableview, record, element, rowIndex, e, eOpts) {
        var rgn = record.data.RGN;
        url = '/Gemini/AR/AgingReview2b/index.html?DB=GI&RGN=' + rgn;
        //window.open(url, "_blank", "toolbar=yes,scrollbars=yes,resizable=yes,top=500,left=500,width=980,height=700");
    },

    onGrid1CellDblClick: function(tableview, td, cellIndex, record, tr, rowIndex, e, eOpts) {
        var col =tableview.eventPosition.column.dataIndex;
        var cust = record.data.IVBLTO;
        var custname = record.data.CMCNA1;
        console.log(tableview.eventPosition.column);
        var age_grp ='ALL';
        col2 = col.substr(4,1);
        grp = col.substr(0,3);
        if (grp  == 'GRP'){

            if (col2 !== 'C'){
                age_grp = col2;
            } else {
                age_grp = 'CR';
            }
        }

        console.log(col, age_grp,col2, cust);

             var rgn = record.data.RGN;
                url = '/Gemini/AR/AgingReview2b/index.html?DB=GI&RGN=' + rgn + '&GRP=' + age_grp;
                window.open(url, "_blank", "toolbar=yes,scrollbars=yes,resizable=yes,top=500,left=500,width=1080,height=500");

    },

    onViewportAfterRender: function(component, eOpts) {

        Ext.Ajax.request({
                url: '/Gemini/AR/getAsOf.php?DB=GI' ,
                method: 'GET',

                async: false,
                callback: function ( options, success, response ) {

                    var obj = Ext.JSON.decode(response.responseText);
                    console.log('asof date: ', obj.asof );
                    value = Ext.Date.parse(obj.asof,'Y-m-d');
                    console.log('asof date2: ', value );
                    Ext.getCmp('asof').setValue(value);
                    Ext.getCmp('casof').setValue(value);
                    Ext.getCmp('xasof').setVisible(false);
                }
        });


        Ext.Ajax.request({
                url: '/Gemini/AR/getUsrCrtView.php?DB=GI' ,
                method: 'GET',

                async: false,
                callback: function ( options, success, response ) {

        //Ext.MessageBox.setHidden(true);
                    //  console.log(response);
                    var obj = Ext.JSON.decode(response.responseText);
                      console.log(obj.msg);

                  if (obj.msg == 'Y'){
               //  winbuild = Ext.widget('winbuild');
                   //   winbuild.setVisible(true);


                   Ext.Ajax.request({
                url: '/Gemini/AR/CrtAgeView.php?DB=GI' ,
                method: 'GET',
                async: false,
                success: function(response, opts) {
                     var obj = Ext.JSON.decode(response.responseText);
           console.log(obj.msg);

                },

                failure: function(response, opts) {
                    console.log(response);
                  //  console.log('server-side failure with status code ' + response.status);
                }
            });
        // winbuild.setVisible(false);
                  }

                }
            });


        store = Ext.getStore('store_Rgns');
        store.load();
    }

});