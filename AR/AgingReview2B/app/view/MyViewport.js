/*
 * File: app/view/MyViewport.js
 *
 * This file was generated by Sencha Architect version 4.2.5.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.6.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.6.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.view.MyViewport', {
    extend: 'Ext.container.Viewport',
    alias: 'widget.myviewport',

    requires: [
        'MyApp.view.MyViewportViewModel',
        'Ext.grid.Panel',
        'Ext.view.Table',
        'Ext.grid.column.Number',
        'Ext.grid.filters.filter.List',
        'Ext.grid.filters.filter.Number',
        'Ext.grid.filters.filter.String',
        'Ext.grid.filters.Filters',
        'Ext.toolbar.Toolbar',
        'Ext.form.Label',
        'Ext.grid.feature.Summary',
        'Ext.button.Button',
        'Ext.menu.Menu',
        'Ext.menu.Item',
        'Ext.grid.plugin.Exporter'
    ],

    viewModel: {
        type: 'myviewport'
    },
    height: 250,
    width: 400,
    layout: 'fit',
    defaultListenerScope: true,

    listeners: {
        afterlayout: 'onViewportAfterLayout'
    },
    items: [
        {
            xtype: 'gridpanel',
            stateful: true,
            stateId: 'gridb',
            id: 'gridb',
            title: 'My Grid Panel',
            columnLines: true,
            bind: {
                store: 'storeRgn'
            },
            viewConfig: {
                getRowClass: function(record, rowIndex, rowParams, store) {
                    console.log(record.data.GRP_5_AMT);
                    if (record.data.IVPRI == 1){
                        return 'p1-row';
                    }
                    if (record.data.IVPRI == 2){
                        return 'p2-row';
                    }
                    if (record.data.IVPRI == 3){
                        return 'p3-row';
                    }
                    if (record.data.IVPRI == 4){
                        return 'p4-row';
                    }
                    if (record.data.IVPRI == 5){
                        return 'child-row';
                    }
                    if (record.data.GRP_5 == 5){
                        return 'child-row';
                    }
                    if (record.data.IVPRI == 99 && record.data.GRP_5_AMT >0){
                        return 'adult-row';
                    }
                },
                stateful: true,
                stateId: 'gridb_table',
                loadingText: 'Retreiving aging data for slected region'
            },
            columns: [
                {
                    xtype: 'numbercolumn',
                    stateful: true,
                    stateId: 'b1',
                    width: 42,
                    align: 'center',
                    dataIndex: 'IVPRI',
                    text: 'AR<br>Pri',
                    format: '00',
                    filter: {
                        type: 'list'
                    }
                },
                {
                    xtype: 'numbercolumn',
                    stateful: true,
                    stateId: 'b2',
                    align: 'end',
                    dataIndex: 'IVBLTO',
                    text: 'Customer',
                    format: '00',
                    filter: {
                        type: 'number'
                    }
                },
                {
                    xtype: 'gridcolumn',
                    stateful: true,
                    stateId: 'b3',
                    width: 165,
                    dataIndex: 'CMCNA1',
                    text: 'Name',
                    filter: {
                        type: 'string'
                    }
                },
                {
                    xtype: 'numbercolumn',
                    summaryRenderer: function(val, params, data, metaData) {
                        value = Ext.util.Format.number(val, '0,000.00');
                        return value;
                    },
                    summaryType: 'sum',
                    stateful: true,
                    stateId: 'b4',
                    width: 67,
                    align: 'center',
                    dataIndex: 'CTOT',
                    text: 'Total Due',
                    filter: {
                        type: 'number'
                    }
                },
                {
                    xtype: 'gridcolumn',
                    stateful: true,
                    stateId: 'b5',
                    text: 'Credits',
                    columns: [
                        {
                            xtype: 'numbercolumn',
                            summaryRenderer: function(val, params, data, metaData) {
                                value = Ext.util.Format.number(val, '0,000.00');
                                return value;
                            },
                            summaryType: 'sum',
                            stateful: true,
                            stateId: 'b6',
                            align: 'end',
                            dataIndex: 'GRP_CR_AMT',
                            text: 'Amount',
                            filter: {
                                type: 'number'
                            }
                        },
                        {
                            xtype: 'numbercolumn',
                            summaryRenderer: function(val, params, data, metaData) {
                                value = Ext.util.Format.number(val, '0,000');
                                return value;
                            },
                            summaryType: 'sum',
                            stateful: true,
                            stateId: 'b7',
                            width: 50,
                            align: 'end',
                            dataIndex: 'GRP_CR_CNT',
                            text: '#',
                            format: '00',
                            filter: {
                                type: 'number'
                            }
                        }
                    ]
                },
                {
                    xtype: 'gridcolumn',
                    stateful: true,
                    stateId: 'b8',
                    text: 'Current',
                    columns: [
                        {
                            xtype: 'numbercolumn',
                            summaryRenderer: function(val, params, data, metaData) {
                                value = Ext.util.Format.number(val, '0,000.00');
                                return value;
                            },
                            summaryType: 'sum',
                            stateful: true,
                            stateId: 'b9',
                            align: 'end',
                            dataIndex: 'GRP_0_AMT',
                            text: 'Amount',
                            filter: {
                                type: 'number'
                            }
                        },
                        {
                            xtype: 'numbercolumn',
                            summaryRenderer: function(val, params, data, metaData) {
                                value = Ext.util.Format.number(val, '0,000');
                                return value;
                            },
                            summaryType: 'sum',
                            stateful: true,
                            stateId: 'b10',
                            width: 50,
                            align: 'end',
                            dataIndex: 'GRP_0_CNT',
                            text: '#',
                            format: '00',
                            filter: {
                                type: 'number'
                            }
                        }
                    ]
                },
                {
                    xtype: 'gridcolumn',
                    stateful: true,
                    stateId: 'b11',
                    text: '1-15',
                    columns: [
                        {
                            xtype: 'numbercolumn',
                            summaryRenderer: function(val, params, data, metaData) {
                                value = Ext.util.Format.number(val, '0,000.00');
                                return value;
                            },
                            summaryType: 'sum',
                            stateful: true,
                            stateId: 'b12',
                            align: 'end',
                            dataIndex: 'GRP_1_AMT',
                            text: 'Amount',
                            filter: {
                                type: 'number'
                            }
                        },
                        {
                            xtype: 'numbercolumn',
                            summaryRenderer: function(val, params, data, metaData) {
                                value = Ext.util.Format.number(val, '0,000');
                                return value;
                            },
                            summaryType: 'sum',
                            stateful: true,
                            stateId: 'b13',
                            width: 50,
                            align: 'end',
                            dataIndex: 'GRP_1_CNT',
                            text: '#',
                            format: '00',
                            filter: {
                                type: 'number'
                            }
                        }
                    ]
                },
                {
                    xtype: 'gridcolumn',
                    stateful: true,
                    stateId: 'b14',
                    text: '16-30',
                    columns: [
                        {
                            xtype: 'numbercolumn',
                            summaryRenderer: function(val, params, data, metaData) {
                                value = Ext.util.Format.number(val, '0,000.00');
                                return value;
                            },
                            summaryType: 'sum',
                            stateful: true,
                            stateId: 'b15',
                            align: 'end',
                            dataIndex: 'GRP_2_AMT',
                            text: 'Amount',
                            filter: {
                                type: 'number'
                            }
                        },
                        {
                            xtype: 'numbercolumn',
                            summaryRenderer: function(val, params, data, metaData) {
                                value = Ext.util.Format.number(val, '0,000');
                                return value;
                            },
                            summaryType: 'sum',
                            stateful: true,
                            stateId: 'b16',
                            width: 50,
                            align: 'end',
                            dataIndex: 'GRP_2_CNT',
                            text: '#',
                            format: '00',
                            filter: {
                                type: 'number'
                            }
                        }
                    ]
                },
                {
                    xtype: 'gridcolumn',
                    stateful: true,
                    stateId: 'b17',
                    text: '31-60',
                    columns: [
                        {
                            xtype: 'numbercolumn',
                            summaryRenderer: function(val, params, data, metaData) {
                                value = Ext.util.Format.number(val, '0,000.00');
                                return value;
                            },
                            summaryType: 'sum',
                            stateful: true,
                            stateId: 'b18',
                            align: 'end',
                            dataIndex: 'GRP_3_AMT',
                            text: 'Amount',
                            filter: {
                                type: 'number'
                            }
                        },
                        {
                            xtype: 'numbercolumn',
                            summaryRenderer: function(val, params, data, metaData) {
                                value = Ext.util.Format.number(val, '0,000');
                                return value;
                            },
                            summaryType: 'sum',
                            stateful: true,
                            stateId: 'b19',
                            width: 50,
                            align: 'end',
                            dataIndex: 'GRP_3_CNT',
                            text: '#',
                            format: '00',
                            filter: {
                                type: 'number'
                            }
                        }
                    ]
                },
                {
                    xtype: 'gridcolumn',
                    stateful: true,
                    stateId: 'b20',
                    text: '61-90',
                    columns: [
                        {
                            xtype: 'numbercolumn',
                            summaryRenderer: function(val, params, data, metaData) {
                                value = Ext.util.Format.number(val, '0,000.00');
                                return value;
                            },
                            summaryType: 'sum',
                            stateful: true,
                            stateId: 'b21',
                            align: 'end',
                            dataIndex: 'GRP_4_AMT',
                            text: 'Amount',
                            filter: {
                                type: 'number'
                            }
                        },
                        {
                            xtype: 'numbercolumn',
                            summaryRenderer: function(val, params, data, metaData) {
                                value = Ext.util.Format.number(val, '0,000');
                                return value;
                            },
                            summaryType: 'sum',
                            stateful: true,
                            stateId: 'b22',
                            width: 50,
                            align: 'end',
                            dataIndex: 'GRP_4_CNT',
                            text: '#',
                            format: '00',
                            filter: {
                                type: 'number'
                            }
                        }
                    ]
                },
                {
                    xtype: 'gridcolumn',
                    stateful: true,
                    stateId: 'bc7',
                    text: 'Over 90',
                    columns: [
                        {
                            xtype: 'numbercolumn',
                            summaryRenderer: function(val, params, data, metaData) {
                                value = Ext.util.Format.number(val, '0,000.00');
                                return value;
                            },
                            summaryType: 'sum',
                            stateful: true,
                            stateId: 'b24',
                            align: 'end',
                            dataIndex: 'GRP_5_AMT',
                            text: 'Amount',
                            filter: {
                                type: 'number'
                            }
                        },
                        {
                            xtype: 'numbercolumn',
                            summaryRenderer: function(val, params, data, metaData) {
                                value = Ext.util.Format.number(val, '0,000');
                                return value;
                            },
                            summaryType: 'sum',
                            stateful: true,
                            stateId: 'b25',
                            width: 50,
                            align: 'end',
                            dataIndex: 'GRP_5_CNT',
                            text: '#',
                            format: '00',
                            filter: {
                                type: 'number'
                            }
                        }
                    ]
                }
            ],
            plugins: [
                {
                    ptype: 'gridfilters',
                    stateId: 'b26'
                },
                {
                    ptype: 'gridexporter'
                }
            ],
            dockedItems: [
                {
                    xtype: 'toolbar',
                    dock: 'top',
                    items: [
                        {
                            xtype: 'label',
                            id: 'pri1c',
                            padding: '5,0,0,0',
                            style: 'background-color: #fed0a3 !important; ',
                            text: 'Priority 1 (Invoices > 45 days w/ Must Ship Date)'
                        },
                        {
                            xtype: 'label',
                            id: 'pri2c',
                            padding: '5,0,0,0',
                            style: ' background-color: #fee2a3 !important; ',
                            text: 'Priority 2 (Invoices > 45 days with a Credit Flag)'
                        },
                        {
                            xtype: 'label',
                            id: 'pri3c',
                            padding: '5,0,0,0',
                            style: 'background-color: #919fd3 !important; color: Black;',
                            text: 'Priority 3 (Invoices > 90 days with open events) '
                        },
                        {
                            xtype: 'label',
                            id: 'pri4c',
                            padding: '5,0,0,0',
                            style: ' background-color: #85ebcd !important; color:Black;',
                            text: 'Priority 4 (Invoice date > 90 days without events)'
                        },
                        {
                            xtype: 'label',
                            id: 'pri5c',
                            padding: '5,0,0,0',
                            style: 'background-color:  #ffe2e2 !important; color:black; !important; ',
                            text: 'Priority 5 (Zero Due, Negative Posted)'
                        }
                    ]
                },
                {
                    xtype: 'toolbar',
                    dock: 'top',
                    items: [
                        {
                            xtype: 'button',
                            hidden: true,
                            text: 'Export',
                            menu: {
                                xtype: 'menu',
                                width: 120,
                                items: [
                                    {
                                        xtype: 'menuitem',
                                        text: 'To Excel',
                                        listeners: {
                                            click: 'onMenuitemClick'
                                        }
                                    },
                                    {
                                        xtype: 'menuitem',
                                        text: 'To CSV',
                                        listeners: {
                                            click: 'onMenuitemClick1'
                                        }
                                    },
                                    {
                                        xtype: 'menuitem',
                                        text: 'to HTML',
                                        listeners: {
                                            destroy: 'onMenuitemDestroy'
                                        }
                                    }
                                ]
                            }
                        }
                    ]
                }
            ],
            listeners: {
                celldblclick: 'onGridbCellDblClick',
                statesave: 'onGridbStateSave',
                staterestore: 'onGridbStateRestore'
            },
            features: [
                {
                    ftype: 'summary',
                    dock: 'top'
                }
            ]
        }
    ],

    onViewportAfterLayout: function(container, layout, eOpts) {
        var params = Ext.urlDecode(location.search.substring(1));
        Ext.getCmp('gridb').setTitle('Customer Review for Region ' + params.RGN);


    },

    onGridbCellDblClick: function(tableview, td, cellIndex, record, tr, rowIndex, e, eOpts) {


        var col =tableview.eventPosition.column.dataIndex;
        var cust = record.data.IVBLTO;
        var custname = record.data.CMCNA1;
        console.log(tableview.eventPosition.column);
        var age_grp ='ALL';
        col2 = col.substr(4,1);
        grp = col.substr(0,3);
        if (grp  == 'GRP'){

            if (col2 !== 'C'){
                age_grp = col2;
            } else {
                age_grp = 'CR';
            }
        }

        console.log(col, age_grp,col2, cust);

        url = '/Gemini/AR/AgingReview2C/index.html?DB=GI&CUST=' + cust + '&GRP=' + age_grp + '&NAME=' + custname;
        window.open(url, cust, "toolbar=yes,scrollbars=yes,resizable=yes,top=500,left=500,width=1600,height=500");
    },

    onGridbStateSave: function(stateful, state, eOpts) {
        console.log('Grid State Save: ', stateful, state);

    },

    onGridbStateRestore: function(stateful, state, eOpts) {
        console.log('Grid State Restore: ',stateful, state );

    },

    onMenuitemClick: function(item, e, eOpts) {
        var params = Ext.urlDecode(location.search.substring(1));
        console.log('Params: ', params);


                var grid = Ext.getCmp('gridb');
                var dt = Ext.Date.format(new Date(), 'Y-m-d h:i:s');
                grid.saveDocumentAs({
                    type: 'xlsx',
                    title: 'AR Aging By Region and Groups ' + params.GRP,
                    fileName: 'ARAging_By_Region_' + params.GRP + '_' + dt +'.xlsx'



        });
    },

    onMenuitemClick1: function(item, e, eOpts) {
         var params = Ext.urlDecode(location.search.substring(1));
                console.log('Params: ', params);
        var grid = Ext.getCmp('gridb');
        var dt = Ext.Date.format(new Date(), 'Y-m-d h:i:s');
        grid.saveDocumentAs({
            type: 'csv',
            title: 'AR Aging By Region and Groups ' + params.GRP,
            fileName: 'ARAging_By_Region_' + params.GRP + '_' + dt +'.csv'
        });
    },

    onMenuitemDestroy: function(component, eOpts) {
         var params = Ext.urlDecode(location.search.substring(1));
        var grid = Ext.getCmp('gridb');
        var dt = Ext.Date.format(new Date(), 'Y-m-d h:i:s');
        grid.saveDocumentAs({
            type: 'html',
            title: 'AR Aging By Region and Groups ' + params.GRP,
            fileName: 'ARAging_By_Region' + params.GRP + '_' + dt +'.html'
        });
    }

});